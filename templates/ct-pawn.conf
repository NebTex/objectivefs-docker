{{ if (env "VAULT_ADDR") }}
  {{ with printf "aws/creds/%s" (env "APP_ROLE") | secret }}
    {{ scratch.Set "secret_key" .Data.secret_key }}
    {{ scratch.Set "access_key" .Data.access_key }}
  {{ end }}
  {{ with printf "consul/creds/%s" (env "APP_ROLE") | secret }}
    {{ scratch.Set "consul_token" .Data.token }}
  {{ end }}
{{ end }}
{{ scratch.SetX "secret_key" (env "AWS_SECRET_ACCESS_KEY") }}
{{ scratch.SetX "access_key" (env "AWS_ACCESS_KEY_ID") }}
{{ scratch.SetX "consul_token" (env "CONSUL_HTTP_TOKEN") }}

// This denotes the start of the configuration section for Consul. All values
// contained in this section pertain to Consul.
consul {
  token = "{{ scratch.Get "consul_token" }}"
}

pid_file = "/pids/objectivefs"

// This is the quiescence timers; it defines the minimum and maximum amount of
// time to wait for the cluster to reach a consistent state before rendering a
// template. This is useful to enable in systems that have a lot of flapping,
// because it will reduce the the number of times a template is rendered.
wait {
  min = "5s"
  max = "10s"
}

// This block defines the configuration for exec mode. Please see the exec mode
// documentation at the bottom of this README for more information on how exec
// mode operates and the caveats of this mode.
exec {
  // This is the command to exec as a child process. There can be only one
  // command per Consul Template process.
  command = "/bin/objectivefs"

  // This is a random splay to wait before killing the command. The default
  // value is 0 (no wait), but large clusters should consider setting a splay
  // value to prevent all child processes from reloading at the same time when
  // data changes occur. When this value is set to non-zero, Consul Template
  // will wait a random period of time up to the splay value before reloading
  // or killing the child process. This can be used to prevent the thundering
  // herd problem on applications that do not gracefully reload.
  splay = "5s"

  env {
    // This specifies if the child process should not inherit the parent
    // process s environment. By default, the child will have full access to the
    // environment variables of the parent. Setting this to true will send only
    // the values specified in `custom_env` to the child process.
    pristine = true

  }
  // This defines the signal that will be sent to the child process when a
  // change occurs in a watched template. The signal will only be sent after the
  // process is started, and the process will only be started after all
  // dependent templates have been rendered at least once. The default value is
  // nil, which tells Consul Template to stop the child process and spawn a new
  // one instead of sending it a signal. This is useful for legacy applications
  // or applications that cannot properly reload their configuration without a
  // full reload.
  reload_signal = "SIGHUP"

  // This defines the signal sent to the child process when Consul Template is
  // gracefully shutting down. The application should begin a graceful cleanup.
  // If the application does not terminate before the `kill_timeout`, it will
  // be terminated (effectively "kill -9"). The default value is "SIGTERM".
  kill_signal = "SIGINT"

  // This defines the amount of time to wait for the child process to gracefully
  // terminate when Consul Template exits. After this specified time, the child
  // process will be force-killed (effectively "kill -9"). The default value is
  // "30s".
  kill_timeout = "2s"
}


template {
  source = "/templates/ACCOUNT"
  destination = "/etc/objectivefs.env/ACCOUNT"
}

template {
  source = "/templates/AWS_DEFAULT_REGION"
  destination = "/etc/objectivefs.env/AWS_DEFAULT_REGION"
}

template {
  source = "/templates/BUCKET"
  destination = "/etc/objectivefs.env/BUCKET"
}

template {
  source = "/templates/CACHESIZE"
  destination = "/etc/objectivefs.env/CACHESIZE"
}

template {
  source = "/templates/DISKCACHE_SIZE"
  destination = "/etc/objectivefs.env/DISKCACHE_SIZE"
}

template {
  source = "/templates/OBJECTIVEFS_LICENSE"
  destination = "/etc/objectivefs.env/OBJECTIVEFS_LICENSE"
}

template {
  source = "/templates/OBJECTIVEFS_PASSPHRASE"
  destination = "/etc/objectivefs.env/OBJECTIVEFS_PASSPHRASE"
}

template {
  contents = "{{ scratch.Get "access_key"}}"
  destination = "/etc/objectivefs.env/AWS_ACCESS_KEY_ID"
}

template {
  contents = "{{ scratch.Get "secret_key"}}"
  destination = "/etc/objectivefs.env/AWS_SECRET_ACCESS_KEY"
}